// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Customer {
  id       String     @id @default(uuid())
  name     String     @unique // Full name of the customer.
  contract Contract[]
}

// Model representing individual rental units or apartments.
model Unit {
  id          String     @id @default(uuid())
  name        String     @unique
  dailyRate   Float      @default(0)
  monthlyRate Float      @default(0)
  status      UnitStatus @default(VACANT)

  Contract Contract[]
}

model Contract {
  id               String       @id @default(uuid())
  type             ContractType @default(INACTIVE)
  startDate        DateTime     @default(now())
  endDate          DateTime     @default(now())
  isDaily          Boolean      @default(false)
  dailyAmount      Float        @default(0)
  monthlyAmount    Float        @default(0)
  newMonthlyAmount Float        @default(0)
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt

  unitId String
  unit   Unit   @relation(fields: [unitId], references: [id], onDelete: Cascade)

  customerId String
  customer   Customer @relation(fields: [customerId], references: [id])

  Transaction       Transaction[]
  ContractExtension ContractExtension[]
}

model ContractExtension {
  id            String   @id @default(uuid())
  startDate     DateTime
  endDate       DateTime
  isDaily       Boolean  @default(false)
  dailyAmount   Float    @default(0)
  monthlyAmount Float    @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  contractId String
  contract   Contract @relation(fields: [contractId], references: [id])

  Transaction Transaction[]
}

model Transaction {
  id     String          @id @default(uuid())
  date   DateTime        @default(now()) // Date of the transaction.
  type   TransactionType // Type of the transaction (rent, payment, etc.).
  amount Float           @default(0) // Amount of the transaction.

  fromDate DateTime?
  toDate   DateTime?
  fromTime DateTime?
  tillTime DateTime?
  // time     DateTime? @db.Time()

  contractId String // ID of the associated contract.
  contract   Contract @relation(fields: [contractId], references: [id]) // The associated contract.

  extensionId String? // In case I want to link it to a certain extension / month
  extension   ContractExtension? @relation(fields: [extensionId], references: [id]) // The associated extension.

  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt()
}

// *******************************************************************************
// ENUMS
// *******************************************************************************

enum ContractType {
  INQUIRY
  ACTIVE
  INACTIVE
  RELEASED
  RESERVED
}

// Types of financial transactions associated with a contract.
enum TransactionType {
  CLEANING // Charges for cleaning services.
  ELECTRICITY // Charges for electricity usage.
  INTERNET
  MAINTENANCE_FEE // Maintenance or repair charges.
  PAYMENT // Payments made by the tenant.
  RENT
}

enum UnitStatus {
  VACANT
  OCCUPIED
  MAINTENANCE
  RESERVED
}

// model Unitsssss {
//   id          String     @id @unique @default(uuid())
//   name        String     @unique
//   monthlyRate Float      @default(600) // Most recent default price in USD
//   dailyRate   Float      @default(400) // Most recent default daily rate in USD
//   type        UnitType   @default(STUDIO)
//   status      UnitStatus @default(VACANT)
//   block       Block      @default(A)

//   rateHistory RateHistory[]

//   // currencyId String   @default("e69607d7-71d6-429d-b15e-d220201e7a20")
//   // currency   Currency @relation(fields: [currencyId], references: [id])
//   currency CurrencyEnum @default(USD)

//   // buildingId String   @default("77159616-0c50-4bd2-a708-2391b45debe5")
//   // building   Building @relation(fields: [buildingId], references: [id])

//   contract Contract[]
// }
